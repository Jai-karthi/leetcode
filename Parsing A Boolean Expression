class Solution:
    def parseBoolExpr(self, expression: str) -> bool:
        stack = []
        for char in expression:
            if char in '(,':
                continue
            if char in  ["t", "f", "!", "&", "|"]:
                stack.append(char)
            elif char == ")":
                has_true = False
                has_false= False
                while stack[-1] not in  "&|!":
                    op = stack.pop()
                    if op == 't':
                        has_true = True
                    elif op  == 'f':
                        has_false= True
                print(has_true,has_false)
                st = stack.pop()
                if st == "!":
                    stack.append("t" if not has_true else "f")
                elif st == "&":
                    stack.append("f" if has_false else "t")
                else:
                    stack.append("t" if has_true else "f")

        return stack[-1] == 't'
