for r in range(1, len(matrix)):
    for c in range(len(matrix[0])):
        if c == 0:
            matrix[r][c] += min(matrix[r-1][c], matrix[r-1][c+1])
        elif c == len(matrix[0])-1:
            matrix[r][c] += min(matrix[r-1][c], matrix[r-1][c-1])
        else:
            matrix[r][c] += min(matrix[r-1][c], matrix[r-1][c+1], matrix[r-1][c-1])
print(min(matrix[-1]))
class Solution:
    def minFallingPathSum(self, matrix: List[List[int]]) -> int:
        dp = [[0]* len(matrix[0]) ] * len(matrix) 
        dp[0] = matrix[0].copy()
        
        def mi_1(index_i,index_j,dp,matrix):
            min_2 = float('inf')
            for i,j in ((1,0),(1,-1),(1,1)):
                if index_i-i < 0 or index_j-j >= len(matrix)  or  index_i -i >= len(matrix) or index_j-j < 0 :
                    continue
                min_2 = min(min_2,dp[index_i - i][index_j - j])
            return min_2
            
        for i  in  range(1,len(matrix)):
            for j in range(len(matrix[0])):
                dp[i][j] = matrix[i][j] +  mi_1(i,j,dp,matrix)
                
        return min(dp[len(matrix) - 1])
