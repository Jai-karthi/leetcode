class Solution:
    def getMaximumGold(self, grid: List[List[int]]) -> int:
        DIRECTIONS = [0, 1, 0, -1, 0]
        rows = len(grid)
        cols = len(grid[0])
        max_gold = 0

        def dfs_backtrack(grid, rows, cols, row, col):
            # Base case: this cell is not in the matrix or has no gold
            if row < 0 or col < 0 or row == rows or col == cols or \
                    grid[row][col] == 0:
                return 0
            max_gold = 0

            # Mark the cell as visited and save the value
            original_val = grid[row][col]
            grid[row][col] = 0

            # Backtrack in each of the four directions
            for direction in range(4):
                max_gold = max(max_gold,
                               dfs_backtrack(grid, rows, cols, 
                                             DIRECTIONS[direction] + row,
                                             DIRECTIONS[direction + 1] + col))

            # Set the cell back to its original value
            grid[row][col] = original_val
            return max_gold + original_val

        # Search for the path with the maximum gold starting from each cell
        for row in range(rows):
            for col in range(cols):
                max_gold = max(max_gold, dfs_backtrack(grid, rows, cols, row, 
                                                       col))
        return max_gold

        grid = [[0,6,0],[5,8,7],[0,9,0]]
m = len(grid[0])
n = len(grid)

def dfs(r,c,grid,visit):
    if min(r,c) < 0 or grid[r][c] == 0 or r == len(grid)  or c == len(grid[0])  or (r,c) in visit  :
        return 0
    visit.add((r,c))
    res = grid[r][c]
    direction = [[r-1,c],[r+1,c],[r,c-1],[r,c+1]]
    for row,col in direction:
        res = max(res,grid[r][c] + dfs(row ,col,grid,visit))
    visit.remove((r,c))
    return res
res = 0
for i in range(m):
    for j in range(n):
        res = max(res,dfs(i,j,grid,set()))
print(res)
