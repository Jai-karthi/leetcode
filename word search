class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        rows = len(board)
        cols = len(board[0])
        def dfs(row,col,count):
            if row < 0 or col < 0 or row == rows or col == cols :
                return False
            if board[row][col] == 'v' or board[row][col] != word[count]:
                return False
            if count == len(word) -1 :
                return True
            cache = board[row][col]
            board[row][col] = 'v'
            result = dfs(row + 1, col,count + 1) or dfs(row - 1,col,count +1 ) or dfs(row,col + 1,count + 1)or dfs(row,col -1 ,count + 1)
            board[row][col] = cache
            return result
        return any(dfs(row,col,0) for row in range(rows) for col in range(cols))
