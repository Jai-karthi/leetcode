from collections import defaultdict, deque

class Solution(object):
    def findMinHeightTrees(self, n, edges):
        if n == 1:
            return [0]

        # Build the graph
        graph = defaultdict(list)
        indegrees = [0] * n

        for from_node, to_node in edges:
            graph[from_node].append(to_node)
            graph[to_node].append(from_node)
            indegrees[to_node] += 1
            indegrees[from_node] += 1

        # Initialize the queue with leaf nodes
        leaves = deque(node for node in range(n) if indegrees[node] == 1)

        while n > 2:
            current_leaves_count = len(leaves)
            n -= current_leaves_count

            for _ in range(current_leaves_count):
                leaf_to_remove = leaves.popleft()
                for neighbor in graph[leaf_to_remove]:
                    indegrees[neighbor] -= 1
                    if indegrees[neighbor] == 1:
                        leaves.append(neighbor)

        return leaves
